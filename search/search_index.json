{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>pyloans</code>: Analytics for Personal Loans","text":""},{"location":"#introduction","title":"Introduction","text":"<p><code>pyloans</code> is a python based package to simplify, analyze and work with installment based loan obligations. The installments are generally a fixed amount that the borrower pays to the lender at equally spaced intervals over the life of the loan.</p> <p>The <code>pyloans</code> package is written with both the borrowers (end-consumer) and lenders (financial institutions) in mind.</p> <p>From a borrower's perspective the package offers the following functionality:</p> <ol> <li>Original schedule of Cashflows</li> <li>Modified schedule of Cashflows, in case of additional payments or full    pre-payment</li> <li>Updated date of maturity based on additional payments made</li> <li>Annual Percentage Rate (APR)</li> </ol> <p>From a lenders perspective the package offers the following functionality:</p> <ol> <li>Weighted average life of a loan (WAL)</li> </ol> <p>Please see Quickstart guide for basic functionality of the package.</p>"},{"location":"loan/","title":"Loan","text":"<p>The <code>Loan</code> class is the fundamental building block of the pyloans packages. It enables us to created instances of installment loans. Once a <code>Loan</code> object is created, we can run analyze the properties of the loan such as generating a Cashflow schedule, compute the Weighted Average Life of the loans etc.</p> <p>Please see below for basic CRUD (no deletion) operations concerning the <code>Loan</code> class.</p>"},{"location":"loan/#instantiation-creating-a-loan-object","title":"Instantiation: Creating a Loan object","text":"<p>An instance of the <code>Loan</code> class can be created using the following required parameters:</p> <ol> <li><code>loan_amount: float</code>: The original loan amount (principal)    disbursed  on the loan  date. Typical range is 0 - 100,000 for    personal loans.</li> <li><code>int_rate: float</code>: The original rate of interest applicable on the    principal outstanding. Suggested range: 0.0% - 24.99%</li> <li><code>term_in_months</code>: The original term of the loan per schedule.    Typically, &lt;= 80 for personal loans, most common terms are multiples of    6 months.</li> <li><code>loan_dt: str</code>: Date of loan disbursement. Any valid dates    strings in 'YYYY-mm-dd' format, recommended to be after 1970-01-01 to avoid    any unexpected errors.</li> </ol> <p>Additionally, the object also accepts the following optional parameters:</p> <ol> <li><code>freq: str</code>: Frequency of repayment.    Please use <code>Loan.valid_pmt_freq</code> to check for accepted payment    frequencies.</li> <li><code>fees_pct: float</code>: Origination fees charged at the time of    booking, expressed as a % of original loan amount. Range is 0% - 100%    (typically &lt; 15%)</li> <li><code>addl_pmts: dict</code>: A dictionary containing all additional payments    made over and above the scheduled payments for the loan obligation. No      additional payments once the loan is fully pre-paid. Please also      ensure that the amount paid in a particular period is less than or      equal to the closing principal for the current period after      considering all additional payments.</li> <li><code>segment: str</code>: The approx risk category of the loan. Broadly    mapped to six FICO_scoregroups. Configurable via config.yaml for    categories.</li> <li><code>channel: str</code>: Indicator variable to identify if the loan was    booked through a free channel or a paid channel. By default, we have two    specified channels.</li> </ol> Additional information on parameters Parameter Optional? Type Min Max <code>loan_amt</code> No <code>(float, int)</code> 0.0 10e9 <code>int_rate</code> No <code>(float, int)</code> 0.0 1.0 <code>term_in_months</code> No <code>(float, int)</code> 1.0 1200 <code>loan_dt</code> No <code>str</code> None None <code>freq</code> Yes (default: 'M') <code>str</code> None None <code>fees_pct</code> Yes (default: 0.0) <code>(float, int)</code> 0.0 1.0 <code>addl_pmts</code> Yes (default: None) <code>(dict, None)</code> None None <code>segment</code> Yes (default: 'c') <code>str</code> None None <code>channel</code> Yes (default: 'free') <code>str</code> None None <p>Example: Instantiating a Loan object</p> <pre><code>from pyloans import Loan as pyl\n\nl1 = pyl.Loan(\n    loan_amt=20000,\n    interest_rate=0.1099,\n    term_in_months=60,\n    loan_dt=\"2022-12-12\",\n    freq=\"M\",\n    addl_pmts={\n        3: 200,\n        4: 300,\n        5: 400,\n        6: 500,\n    },\n)\n</code></pre>"},{"location":"loan/#loan-properties-retrieving-calculated-loan-properties-attributes","title":"Loan Properties: Retrieving calculated loan properties &amp; attributes","text":"<p>Once a <code>Loan</code> object has been instantiated, with user inputs, the following properties/attributes would be available:</p> <ol> <li><code>pmt: float</code> - Based on the initial parameters of the loan, the attribute reflects the original equated installment amount.</li> <li><code>original_cfs, updated_cfs: pandas.DataFrame</code> - A dataframe with the original/modified schedule of cashflows based on the parameters is returned.</li> <li><code>org_wal, mod_wal: float</code> - Returns the weighted average life of the loan (in months) based on a given cashflow schedule. The WAL of the loan can be defined as the average number of months it takes for the principal of the loan to be repaid, if the borrower repays by the current schedule.</li> <li><code>org_apr, mod_apr: float</code> - Returns the Annual percentage rate (APR) of the loan based on the cashflow schedule. The APR of the loan can be defined as the total financial cost of the loan ( including fees) divided by the WAL of the loan.</li> <li><code>org_maturity_period, mod_maturity_period: float</code> - Returns the maturity in periods, which is same as the term_in_months, converted to the corresponding periods based on the payment frequency.</li> </ol> <p>Example: Retrieving key properties of the Loan</p> <pre><code># Once an instance of Loan is created, we can retrieve various\n# attributes of the instance as shown below:\n\nl1 = pyl.Loan(\n    loan_amt=20000,\n    interest_rate=0.1099,\n    term_in_months=60,\n    loan_dt=\"2022-12-12\",\n)\n\n# Get un-modified loan properties/attributes\n\nl1.pmt  # installment amount on the loan\nl1.original_cfs  # original un-modified schedule of cashflows\nl1.org_wal  # original un-modified weighted average life\nl1.org_apr  # original un-modified annual percentage rate\nl1.org_maturity_period  # number of periods corresponding to term\n\n# Incase there were additional payments provided  or if the loan was\n# updated (see below), the modified properties can be retrieved as below:\n\nl1.updated_cfs  # modified schedule of cashflows after an update\nl1.mod_wal  # modified weihted average life after an update\nl1.mod_apr  # modified annual percentage rate after an update\nl1.mod_maturity_period  # number of remaining periods after an update\n</code></pre>"},{"location":"loan/#updating-modifying-an-existing-loan-instance","title":"Updating: Modifying an existing Loan instance","text":"<p>An existing <code>Loan</code> instance can be updated using the following methods to reflect changes to the original schedule of payment:</p> <ul> <li>Additional payments (<code>update_addl_pmts(addl_pmt_update: dict) -&gt; pd.DataFrame</code>)- The method checks the status of the loan if it is already fully pre-paid. If the loan is already fully pre-paid, we raise an exception notifying the same. Else, the <code>addl_pmts</code> attribute of the loan object is merged to include the additional payment passed to the method.</li> <li>Full-prepayment (<code>prepay_fully(period: int) -&gt; pd.DataFrame</code>) - The method checks the status of the loan if it is already fully pre-paid. If the loan is already fully pre-paid, we raise an exception notifying the same. Else, the outstanding principal amount is considered as the additional payment amount in the period specified and the closing balance of the loan is zero-ed out. The  <code>fully_prepaid</code> flag is also set to 1.</li> </ul> fully_prepaid: attribute <p><code>fully_prepaid: int</code> - A flag to indicate of the loan was fully pre-paid. In case the loan in fully pre-paid, no additional payments can be updated and hence there cannot be further modifications to the cashflows.</p> <p>The following examples illustrate the process for updating an existing <code>Loan</code> instance.</p> <p>Example: Updating an existing Loan</p> <pre><code># Instantiating a loan object\n\nl1 = pyl.Loan(\n    loan_amt=20000,\n    interest_rate=0.1099,\n    term_in_months=60,\n    loan_dt=\"2022-12-12\",\n)\n\n# Updating the `l1` loan instance defined above.\nl1.update_addl_pmts({7: 700})\n\n# Method aggregates all amounts for a particular period across all\n# provided payment updates\nl1.update_addl_pmts({7: 200, 8: 100})\n\n# Fully-prepay a loan in period 40\nl1.prepay_fully(40)\n</code></pre>"},{"location":"loan/#re-setting-re-setting-additional-payments-for-a-loan-instance","title":"Re-setting: Re-setting additional payments for a Loan instance","text":"<p>As mentioned above the <code>update_addl_pmts()</code> method aggregates all the payments mentioned in a particular period. Incase the payment for a period was mis-specified, updating the payment amount as 0 does not re-set the payment for the period, using the <code>reset_addl_pmts()</code> method, all  the additional payments specified can be re-set to zero and the variables per the original schedule are set as the attributes. The <code>fully_prepaid: int</code> attribute is also re-set to zero.</p> <p>Example: Re-setting additional payments</p> <pre><code># Instantiating a Loan object\n\nl1 = pyl.Loan(\n    loan_amt=20000,\n    interest_rate=0.1099,\n    term_in_months=60,\n    loan_dt=\"2022-12-12\",\n    freq=\"M\",\n    addl_pmts={\n        3: 200,\n        4: 300,\n        5: 400,\n        6: 500,\n    },\n)\n\n# Re-settign additional payments on the `l1` loan instance defined above.\nl1.reset_addl_pmts()\n</code></pre>"},{"location":"quickstart/","title":"Quickstart Guide","text":""},{"location":"quickstart/#pyloans-quickstart-guide","title":"<code>pyloans</code>: Quickstart Guide","text":""},{"location":"quickstart/#importing-the-pyloans-package","title":"Importing the <code>pyloans</code> package","text":"<p>Example: Importing module</p> <pre><code>from pyloans import Loan as pyl\n</code></pre>"},{"location":"quickstart/#creating-a-loan-instance","title":"Creating a loan instance","text":"<p>A Loan object is the fundamental building block of the <code>pyloans</code> package. The package provides many parameters (attributes) to create complex loan structures.</p> <p>The below code provides a quick way to create a loan instance with the following parameters:</p> <ul> <li>Loan Amount (<code>loan_amt: (float, int)</code>): $20,000</li> <li>Interest rate (<code>interest_rate: (float, int)</code>): 10.99%</li> <li>Term of the loan in months (<code>term_in_months: (float, int)</code>): 60</li> <li>Loan start date (<code>loan_dt: str</code>): 12th Dec 2022</li> <li>Frequency of repayment (<code>freq: str</code>): Monthly</li> </ul> <p>Example: Instantiating a Loan</p> <pre><code>l1 = pyl.Loan(\n    loan_amt=20000,\n    interest_rate=0.1099,\n    term_in_months=60,\n    loan_dt=\"2022-12-12\",\n    freq=\"M\",\n)\n</code></pre>"},{"location":"quickstart/#getting-the-original-schedule-of-cashflows","title":"Getting the Original schedule of Cashflows","text":"<p>Using the <code>l1</code> loan object we previously instantiated, we can get the original schedule of cashflows calling on the attribute <code>original_cfs</code></p> <p>Example</p> <pre><code>l1.original_cfs\n</code></pre>"},{"location":"quickstart/#updating-additional-payments","title":"Updating additional payments","text":"<p>In case there were payments over and above the scheduled payments, they go towards reducing the principal outstanding. This reduces the overall debt burden of the end-consumer/borrower.</p> <p>The set of additional payments have to be provided as a dictionary. There are two ways to provide additional payments to a loan object. First, the additional payments can be provided while instantiating the loan object using the <code>addl_pmts</code> attribute as below:</p> <p>Example 1: Updating additional payments</p> <pre><code>l1 = pyl.Loan(\n    loan_amt=20000,\n    interest_rate=0.1099,\n    term_in_months=60,\n    loan_dt=\"2022-12-12\",\n    freq=\"M\",\n    addl_pmts={\n        3: 200,\n        4: 300,\n        5: 400,\n        6: 500,\n    },\n)\n</code></pre> <p>The keys indicate the <code>period</code> when the payment was made. The period of the loan depends on the frequency of repayment and is not necessarily the month in which the payment was made. In the above example we record additional payments of 200, 300, 400 and 500 made in the period 3, 4, 5 and 6 respectively.</p> <p>Alternatively, additional payments can also be provided using the <code>update_addl_pmts()</code> method as show below:</p> <p>Example 2: Updating additional payments</p> <pre><code>l1.update_addl_pmts({3: 200, 4: 300, 5: 400, 6: 500})\n</code></pre>"},{"location":"quickstart/#get-the-updated-cashflows","title":"Get the updated cashflows","text":"<p>To get update cashflow schedule considering the additional payments made we can use the below attribute from the loan object:</p> <p>Example: Get the updated cashflows</p> <pre><code>l1.updated_cfs\n</code></pre>"},{"location":"quickstart/#get-the-annual-percentage-rate-apr","title":"Get the Annual Percentage Rate (APR)","text":"<p>To get the apr, the all in annualized financial cost, for the loan obligation we call on the property:</p> <p>Example: Get the APR</p> <pre><code>l1.org_apr  # to get the original apr\n\nl1.mod_apr  # to get the latest apr post additional payments\n</code></pre>"},{"location":"quickstart/#get-the-weighted-average-life-wal","title":"Get the Weighted Average Life (WAL)","text":"<p>To get the WAL, the average number of months to get back the principal amount lent to the customer, we call the property:</p> <p>Example: Get the WAL</p> <pre><code>l1.org_wal  # original wal based on the original schedule of cashflows\n\nl1.mod_wal  # modified wal considering the additional payments\n</code></pre> <p>For all the methods and attributes available for a loan object, please see documentation for Loan</p>"}]}